apiVersion: apps/v1
kind: Deployment
metadata:
  name: emailservice
  labels:
    app-group: onlineboutique
    app: emailservice
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: emailservice
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: emailservice
        index: "2"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/emailservice:v0.3.9
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        readinessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        livenessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: emailservice
  labels:
    app-group: onlineboutique
    app: emailservice
spec:
  type: ClusterIP
  selector:
    app-group: onlineboutique
    app: emailservice
  ports:
  - name: grpc
    port: 5000
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkoutservice
  labels:
    app-group: onlineboutique
    app: checkoutservice
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: checkoutservice
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: checkoutservice
        index: "1"
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.3.9
        ports:
        - containerPort: 5050
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:5050"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:5050"]
        env:
        - name: PORT
          value: "5050"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: "productcatalogservice:3550"
        - name: SHIPPING_SERVICE_ADDR
          value: "shippingservice:50051"
        - name: PAYMENT_SERVICE_ADDR
          value: "paymentservice:50051"
        - name: EMAIL_SERVICE_ADDR
          value: "emailservice:5000"
        - name: CURRENCY_SERVICE_ADDR
          value: "currencyservice:7000"
        - name: CART_SERVICE_ADDR
          value: "cartservice:7070"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice
  labels:
    app-group: onlineboutique
    app: checkoutservice
spec:
  type: ClusterIP
  selector:
    app-group: onlineboutique
    app: checkoutservice
  ports:
  - name: grpc
    port: 5050
    targetPort: 5050
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendationservice
  labels:
    app-group: onlineboutique
    app: recommendationservice
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: recommendationservice
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: recommendationservice
        index: "1"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.3.9
        ports:
        - containerPort: 8080
        readinessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        livenessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        env:
        - name: PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: "productcatalogservice:3550"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DISABLE_DEBUGGER
          value: "1"
        resources:
          requests:
            cpu: 100m
            memory: 220Mi
          limits:
            cpu: 200m
            memory: 450Mi
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: recommendationservice
  labels:
    app-group: onlineboutique
    app: recommendationservice
spec:
  type: ClusterIP
  selector:
    app-group: onlineboutique
    app: recommendationservice
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app-group: onlineboutique
    app: frontend
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: frontend
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: frontend
        index: "0"
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/frontend:v0.3.9
        ports:
        - containerPort: 8080
        readinessProbe:
          initialDelaySeconds: 10
          httpGet:
            path: "/_healthz"
            port: 8080
            httpHeaders:
            - name: "Cookie"
              value: "shop_session-id=x-readiness-probe"
        livenessProbe:
          initialDelaySeconds: 10
          httpGet:
            path: "/_healthz"
            port: 8080
            httpHeaders:
            - name: "Cookie"
              value: "shop_session-id=x-liveness-probe"
        env:
        - name: PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: "productcatalogservice:3550"
        - name: CURRENCY_SERVICE_ADDR
          value: "currencyservice:7000"
        - name: CART_SERVICE_ADDR
          value: "cartservice:7070"
        - name: RECOMMENDATION_SERVICE_ADDR
          value: "recommendationservice:8080"
        - name: SHIPPING_SERVICE_ADDR
          value: "shippingservice:50051"
        - name: CHECKOUT_SERVICE_ADDR
          value: "checkoutservice:5050"
        - name: AD_SERVICE_ADDR
          value: "adservice:9555"
        # # ENV_PLATFORM: One of: local, gcp, aws, azure, onprem, alibaba
        # # When not set, defaults to "local" unless running in GKE, otherwies auto-sets to gcp 
        # - name: ENV_PLATFORM 
        #   value: "aws"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        # - name: CYMBAL_BRANDING
        #   value: "true"
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app-group: onlineboutique
    app: frontend
spec:
  selector:
    app-group: onlineboutique
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: paymentservice
  labels:
    app-group: onlineboutique
    app: paymentservice
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: paymentservice
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: paymentservice
        index: "2"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/paymentservice:v0.3.9
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DISABLE_DEBUGGER
          value: "1"
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: paymentservice
  labels:
    app-group: onlineboutique
    app: paymentservice
spec:
  type: ClusterIP
  selector:
    app-group: onlineboutique
    app: paymentservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: productcatalogservice
  labels:
    app-group: onlineboutique
    app: productcatalogservice
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: productcatalogservice
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: productcatalogservice
        index: "2"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.3.9
        ports:
        - containerPort: 3550
        env:
        - name: PORT
          value: "3550"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:3550"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:3550"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice
  labels:
    app-group: onlineboutique
    app: productcatalogservice
spec:
  type: ClusterIP
  selector:
    app-group: onlineboutique
    app: productcatalogservice
  ports:
  - name: grpc
    port: 3550
    targetPort: 3550
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice
  labels:
    app-group: onlineboutique
    app: cartservice
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: cartservice
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: cartservice
        index: "2"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/cartservice:v0.3.9
        ports:
        - containerPort: 7070
        env:
        - name: REDIS_ADDR
          value: "redis-cart:6379"
        resources:
          requests:
            cpu: 200m
            memory: 64Mi
          limits:
            cpu: 300m
            memory: 128Mi
        readinessProbe:
          initialDelaySeconds: 15
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
        livenessProbe:
          initialDelaySeconds: 15
          periodSeconds: 10
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
  labels:
    app-group: onlineboutique
    app: cartservice
spec:
  type: ClusterIP
  selector:
    app-group: onlineboutique
    app: cartservice
  ports:
  - name: grpc
    port: 7070
    targetPort: 7070
---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: loadgenerator
# spec:
#   selector:
#     matchLabels:
#       app: loadgenerator
#   replicas: 1
#   template:
#     metadata:
#       labels:
#         app: loadgenerator
#       annotations:
#         sidecar.istio.io/rewriteAppHTTPProbers: "true"
#     spec:
#       serviceAccountName: default
#       terminationGracePeriodSeconds: 5
#       restartPolicy: Always
#       securityContext:
#         fsGroup: 1000
#         runAsGroup: 1000
#         runAsNonRoot: true
#         runAsUser: 1000
#       initContainers:
#       - command:
#         - /bin/sh
#         - -exc
#         - |
#           echo "Init container pinging frontend: ${FRONTEND_ADDR}..."
#           STATUSCODE=$(wget --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print $2}')
#           if test $STATUSCODE -ne 200; then
#               echo "Error: Could not reach frontend - Status code: ${STATUSCODE}"
#               exit 1
#           fi
#         name: frontend-check
#         image: busybox:latest
#         env:
#         - name: FRONTEND_ADDR
#           value: "frontend:80"
#       containers:
#       - name: main
#         securityContext:
#           allowPrivilegeEscalation: false
#           capabilities:
#             drop:
#               - all
#           privileged: false
#           readOnlyRootFilesystem: true
#         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.3.9
#         env:
#         - name: FRONTEND_ADDR
#           value: "frontend:80"
#         - name: USERS
#           value: "10"
#         resources:
#           requests:
#             cpu: 300m
#             memory: 256Mi
#           limits:
#             cpu: 500m
#             memory: 512Mi
# ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
  labels:
    app-group: onlineboutique
    app: currencyservice
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: currencyservice
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: currencyservice
        index: "2"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/currencyservice:v0.3.9
        ports:
        - name: grpc
          containerPort: 7000
        env:
        - name: PORT
          value: "7000"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DISABLE_DEBUGGER
          value: "1"
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7000"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7000"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: currencyservice
  labels:
    app-group: onlineboutique
    app: currencyservice
spec:
  type: ClusterIP
  selector:
    app-group: onlineboutique
    app: currencyservice
  ports:
  - name: grpc
    port: 7000
    targetPort: 7000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shippingservice
  labels:
    app-group: onlineboutique
    app: shippingservice
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: shippingservice
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: shippingservice
        index: "2"
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/shippingservice:v0.3.9
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        readinessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: shippingservice
  labels:
    app-group: onlineboutique
    app: shippingservice
spec:
  type: ClusterIP
  selector:
    app-group: onlineboutique
    app: shippingservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cart
  labels:
    app-group: onlineboutique
    app: redis-cart
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: redis-cart
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: redis-cart
        index: "3"
    spec:
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: redis
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: redis:alpine
        ports:
        - containerPort: 6379
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        volumeMounts:
        - mountPath: /data
          name: redis-data
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
      - name: redis-data
        emptyDir: {}
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cart
  labels:
    app-group: onlineboutique
    app: redis-cart
spec:
  type: ClusterIP
  selector:
    app-group: onlineboutique
    app: redis-cart
  ports:
  - name: tls-redis
    port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adservice
  labels:
    app-group: onlineboutique
    app: adservice
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      app: adservice
  template:
    metadata:
      labels:
        app-group: onlineboutique
        app: adservice
        index: "1"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/adservice:v0.3.9
        ports:
        - containerPort: 9555
        env:
        - name: PORT
          value: "9555"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        # resources:
        #   requests:
        #     cpu: 200m
        #     memory: 180Mi
        #   limits:
        #     cpu: 300m
        #     memory: 300Mi
        readinessProbe:
          initialDelaySeconds: 20
          periodSeconds: 15
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:9555"]
        livenessProbe:
          initialDelaySeconds: 20
          periodSeconds: 15
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:9555"]
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: adservice
  labels:
    app-group: onlineboutique
    app: adservice
spec:
  type: ClusterIP
  selector:
    app-group: onlineboutique
    app: adservice
  ports:
  - name: grpc
    port: 9555
    targetPort: 9555
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: labeler-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: labeler-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: labeler-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: labeler-role
subjects:
- kind: ServiceAccount
  name: labeler-sa
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: tcp-proxy
  labels:
    app-group: onlineboutique
    component: tcp-proxy
spec:
  selector:
    matchLabels:
      app-group: onlineboutique
      component: tcp-proxy
  template:
    metadata:
      labels:
        app-group: onlineboutique
        component: tcp-proxy
    spec:
      initContainers:
      - image: devth/k8s-labeler
        name: labeler
        env:
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_LABEL_app
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      containers:
      - name: tcp-proxy
        image: tecnativa/tcp-proxy
        env:
        - name: LISTEN
          value: ":80"
        - name: TALK
          value: "frontend:80"
        ports:
        - containerPort: 80
      serviceAccountName: labeler-sa
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app-group: onlineboutique
    component: tcp-proxy
  name: tcp-proxy
spec:
  ports:
  - name: http
    nodePort: 30000
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app-group: onlineboutique
    component: tcp-proxy
  type: NodePort
  externalTrafficPolicy: Local
